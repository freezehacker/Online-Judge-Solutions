这道题如果暴力破解（即算出每两个数之间所有数字的和，然后挑最大的）是不行的，有2个原因：
（1）需要开10000*10000的二维数组，内存会超出限制。
（2）时间复杂度至少是O(n*n)，很可能会超时。

正确的方法是DP。题目要求的，实际上是最大的子串和。注意这里说的“串”是连续的，跟“序列”相对（这道题不可能求序列，否则就挑正数来累加就是了）。状态转移方程是：
dp[i] = max(arr[i], arr[i] + dp[i - 1])
可以这样理解：
首先，dp[i]表示当串的右端到达i位置时的最大和。即当我走到i这个位置（下标），我有两种选择，要么我跟前面的连起来，要么我跟前面的断开，另起炉灶。无非是哪个更大我就作出哪种选择。
明白了之后，就从左往右开始DP就可以了。
